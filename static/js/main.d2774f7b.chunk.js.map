{"version":3,"sources":["components/card-list/card.component.jsx","components/card-list/card-list.component.jsx","components/input/input.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","type","placeholder","onChange","handleChange","App","handler","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","erro","console","log","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAEcA,G,kBAAO,SAAAC,GAEjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,mCAA8BF,EAAMG,QAAQC,GAA5C,aAA2DC,IAAI,KACvE,gCAAML,EAAMG,QAAQG,KAApB,KACA,4BAAKN,EAAMG,QAAQI,UCJlBC,EAAW,SAAER,GACtB,OACI,yBAAKC,UAAU,aAEPD,EAAMS,SAASC,KAAK,SAAAP,GAChB,OAAQ,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,SCN/CS,G,MAAY,SAACZ,GACtB,OACI,2BACAa,KAAK,OACLC,YAAad,EAAMc,YACnBC,SAAUf,EAAMgB,iBC8CTC,E,YAvCb,aAAc,IAAD,8BACX,+CAMFC,QAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SALrD,EAAKC,MAAQ,CACXf,SAAY,GACZY,YAAc,IAJL,E,iFARO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACX,SAASoB,OACvCC,OAAM,SAAAC,GAAI,OAAIC,QAAQC,IAAIF,U,8CAYnB,IAAD,EAC0BG,KAAKV,MAA/Bf,EADA,EACAA,SAAUY,EADV,EACUA,YAEXc,EAAmB1B,EAAS2B,QAAO,SAAAjC,GACvC,OAAQA,EAAQG,KAAK+B,cAAcC,SAASjB,EAAYgB,kBAI1D,OAEE,yBAAKpC,UAAU,OACb,kDACA,kBAAC,EAAD,CACAa,YAAY,iBACZE,aAAckB,KAAKhB,UASnB,kBAAC,EAAD,CAAUT,SAAU0B,IACjBH,QAAQC,IAAIE,Q,GA3CLI,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.d2774f7b.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n export const Card = props => {\n     \n    return (\n        <div className='card-container'>\n            <img src={`https://www.robohash.org/${props.monster.id}?set=set1`} alt=\"\"/>\n            <h2> {props.monster.name} </h2>\n            <h3>{props.monster.email}</h3>            \n        </div>\n    )\n}\n\n// export default Card;","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from './card.component'\n// option 1\nexport const CardList = ( props ) => {\n    return (\n        <div className='card-list'>\n            {\n                props.monsters.map( monster => {\n                    return (<Card key={monster.id} monster={monster} />)\n                })\n            }\n        </div>\n    )\n    \n}\n\n// option 2\n// const CardList = props => {\n//     console.log(props);\n//     return (<div></div>)\n// }\n// export default CardList  \n\n\n\n","import React from 'react'\nimport './input.style.css'\n\nexport const SearchBox = (props) => {\n    return (\n        <input\n        type='text'\n        placeholder={props.placeholder}\n        onChange={props.handleChange}\n        />\n    )\n}","import React from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/input/input.component'\nclass App extends React.Component {\n\n  // call api\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => {this.setState({monsters:users})})\n    .catch(erro => console.log(erro))\n  }\n  \n\n  constructor(){\n    super()\n    this.state = {\n      monsters  : [],\n      searchField : ''\n    };  \n  }\n  handler = (e) => this.setState({searchField : e.target.value})\n  render (){\n    const {monsters, searchField } = this.state\n\n    const filteredMonsters = monsters.filter(monster => {\n      return  monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n  \n  \n    return (\n\n      <div className=\"App\">\n        <h1>Github robots List</h1>\n        <SearchBox\n        placeholder='search monster'\n        handleChange={this.handler}\n        />\n        {/* <input \n          type='search' \n          className='App-input' \n          onChange={e => {this.setState({searchField : e.target.value})}}\n        /> */}\n\n\n        <CardList monsters={filteredMonsters}/>  \n        {  console.log(filteredMonsters) }    \n      </div>\n    );\n  }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}